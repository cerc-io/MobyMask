{"version":3,"sources":["logo.svg","Landing.jsx","createRegistry.js","reportPhishers.js","PhishingReport.jsx","PhisherCheck.jsx","delegator.js","createInvitation.js","Initiation.jsx","QueryParamsRoute.jsx","components/Address.jsx","components/Balance.jsx","constants.js","helpers/Transactor.js","components/Wallet.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/FunctionForm.jsx","components/Faucet.jsx","helpers/loadAppContracts.js","components/Swap.jsx","components/Timeline.jsx","views/Hints.jsx","views/Subgraph.jsx","App.jsx","index.jsx","types.js","../../js-eth-delegatable-utils/index.js","../../js-eth-delegatable-utils/types.js","contracts/external_contracts.js","../../js-eth-delegatable-utils/createTypedMessage.js","createTypedMessage.js"],"names":["Landing","className","disabled","abi","require","address","chainId","name","a","web3Provider","ethers","providers","Web3Provider","window","ethereum","wallet","getSigner","console","log","attachRegistry","registry","signer","Registry","Contract","attach","_registry","deployed","generateUtil","CONTRACT_NAME","reportPhishers","phishers","provider","invitation","key","signedDelegations","util","verifyingContract","Promise","all","map","phisher","_phisher","indexOf","slice","populateTransaction","claimIfPhisher","toLowerCase","desiredTx","invocation","transaction","to","data","gasLimit","authority","invocations","queue","Math","floor","random","signedInvocations","signInvocation","batch","replayProtection","nonce","invoke","props","useState","setPhisher","setPhishers","loaded","setLoaded","useEffect","rawStorage","localStorage","getItem","storedPhishers","JSON","parse","err","error","type","placeholder","onChange","event","target","value","onClick","push","setItem","stringify","length","index","block","clear","setName","output","setOutput","e","checkPhisher","then","result","catch","types","recoverDelegationSigner","createTypedMessage","validateInvitation","getNetwork","Wallet","i","signedDelegation","delegation","delegate","Error","domain","signDelegation","TypedDataUtils","query","search","useLocation","React","useMemo","URLSearchParams","useQuery","setInvitation","errorMessage","setErrorMessage","loading","setLoading","setRegistry","invitations","setInvitations","history","useHistory","createRegistry","rawLoaded","document","cookie","parsedInvitation","get","message","checkInvitations","loadedInvitations","inviteView","addInvitation","tier","petName","prompt","newInvitation","createRandom","hexHash","hashStruct","toString","caveats","enforcer","terms","newSignedDelegation","newInvite","privateKey","createInvitation","inviteLink","location","origin","encodeURIComponent","navigator","clipboard","writeText","alert","generateInviteView","newInvites","PhishingReport","PhisherCheck","isPhisher","_invitation","delegationHash","createSignedDelegationHash","intendedRevocation","signedIntendedRevocation","signRevocation","revokeDelegation","splice","QueryParamsRouter","exact","path","Initiation","Typography","Text","utils","INFURA_ID","hostname","Paragraph","constants","BigNumber","Select","Option","Subgraph","config","App","injectedProvider","setInjectedProvider","MetaMaskOnboarding","isMetaMaskInstalled","ethersProvider","chainName","src","logo","alt","href","startOnboarding","themes","dark","process","light","prevTheme","subgraphUri","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme","getElementById","module","exports","primaryType","version","entries","caveat","EIP712Domain","Invocation","Invocations","SignedInvocation","Transaction","ReplayProtection","Delegation","Caveat","SignedDelegation","sigUtil","fromHexString","hexString","matched","match","mapped","byte","parseInt","Uint8Array","contractInfo","recoverSigner","recoverInvocationSigner","signedInvocation","revocation","recoverRevocationSignature","signedRevocation","typedMessage","recoverTypedSignature","signature","cdomainreateTypedMessage","signTypedData","substring","intentionToRevoke","IntentionToRevoke","SignedIntentionToRevoke","contracts","DAI","inputs","internalType","payable","stateMutability","anonymous","indexed","constant","outputs","UNI","contractName","yourContract","_chainId","deployTransaction"],"mappings":"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","file":"static/js/main.d3643d74.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.06de1321.svg\";","import React from 'react';\nimport logo from './logo.svg';\n\nfunction Landing() {\n  return (\n    <div className='box'>\n      <p>\n        Get warned about phishers on the web:\n      </p>\n      <button className='installButton' disabled>Install the Web Extension (coming soon!)</button>\n    </div>\n  );\n}\n\nexport default Landing;\n","import { ethers } from \"ethers\";\nconst types = require('./types')\nconst { abi } = require('./artifacts');\nconst { chainId, address, name } = require('./config.json');\nconst CONTRACT_NAME = name;\n\nexport default async function createRegistry () {\n  const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n  const wallet = web3Provider.getSigner();\n  console.log('made wallet, attaching registry');\n  const registry = await attachRegistry(wallet);\n  console.log('there it is', registry);\n  return registry;\n}\n\nasync function attachRegistry (signer) {\n  const Registry = new ethers.Contract(address, abi, signer);\n  const _registry = await Registry.attach(address);\n  const deployed = await _registry.deployed();\n  return deployed;\n}\n","import { ethers } from \"ethers\";\nconst types = require('./types')\nconst { generateUtil } = require('eth-delegatable-utils');\nconst { abi } = require('./artifacts');\nconst { chainId, address, name } = require('./config.json');\nconst CONTRACT_NAME = name;\n\nexport default async function reportPhishers (phishers, provider, invitation) {\n  const { key, signedDelegations } = invitation;\n  const util = generateUtil({\n    chainId,\n    verifyingContract: address,\n    name: CONTRACT_NAME,\n  })\n\n  const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n  const wallet = web3Provider.getSigner();\n  const registry = await attachRegistry(wallet);\n\n  const invocations = await Promise.all(phishers.map(async (phisher) => {\n    const _phisher = phisher.indexOf('@') === '0' ? phisher.slice(1) : phisher;\n    const desiredTx = await registry.populateTransaction.claimIfPhisher(`TWT:${_phisher.toLowerCase()}`, true);\n    console.log('desired tx', desiredTx);\n    const invocation = {\n      transaction: {\n        to: address,\n        data: desiredTx.data,\n        gasLimit: 500000,\n      },\n      authority: signedDelegations,\n   }\n   return invocation;\n  }));\n\n  const queue = Math.floor(Math.random() * 100000000);\n  console.log('queue', queue);\n  const signedInvocations = util.signInvocation({\n    batch: invocations,\n    replayProtection: {\n      nonce: 1,\n      queue,\n    }\n  }, key);\n  console.log('signedInvocations ready to invoke', signedInvocations)\n\n  return await registry.invoke([signedInvocations]);\n}\n\nasync function attachRegistry (signer) {\n  const Registry = new ethers.Contract(address, abi, signer);\n  const _registry = await Registry.attach(address);\n  console.log('Attaching to existing contract', _registry);\n  const deployed = await _registry.deployed();\n  return deployed;\n}\n","import React, { useEffect, useState } from 'react';\nimport reportPhishers from './reportPhishers';\n\nexport default function (props ) {\n  const { invitation, provider } = props;\n  const [ phisher, setPhisher ] = useState(null);\n  const [ phishers, setPhishers ] = useState([]);\n  const [ loaded, setLoaded ] = useState(false);\n\n  useEffect(() => {\n    if (loaded) {\n      return;\n    }\n    try {\n      const rawStorage = localStorage.getItem('pendingPhishers');\n      let storedPhishers = JSON.parse(rawStorage) || [];\n      setPhishers(storedPhishers);\n      setLoaded(true);\n    } catch (err) {\n      console.error(err);\n    }\n  });\n\n  return (\n    <div className='box'>\n      <h3>Report a phishing attempt (coming soon)</h3>\n      <input type=\"text\" placeholder=\"@phisher_person\" onChange={(event) => {\n        setPhisher(event.target.value);\n      }}/>\n      <button onClick={() => {\n        if (phisher) {\n          console.log(`appending ${phisher} to `, phishers);\n          phishers.push(phisher);\n          localStorage.setItem('pendingPhishers', JSON.stringify(phishers));\n          setPhisher('');\n        } \n      }}>Report twitter phisher</button>\n\n      <div className='phishers'>\n        { phishers && phishers.length > 0 ? \n        <div>\n          <p>Pending phishing reports:</p>\n          <ol>\n            {phishers.map((phisher, index) => {\n              return (<li key={index}>{phisher}</li>);\n            })}\n          </ol>\n          <button onClick={async () => {\n            console.log('submitting batch');\n            const block = await reportPhishers(phishers, provider, invitation);\n            console.log('batch submitted', block);\n            localStorage.clear();\n            setPhishers([]);\n          }}>Submit batch to blockchain</button>\n        </div> : null }\n      </div>\n    </div>\n  )\n}","import React, { useEffect, useState } from 'react';\n\nexport default function (props) {\n  const [name, setName] = useState('');\n  const [output, setOutput] = useState('');\n  return (\n    <div className=\"box\">\n      <h3>Check Phisher Status</h3>\n      <input type=\"text\" onChange={(e) => setName(e.target.value)} />\n      <button onClick={() => {\n        props.checkPhisher(name)\n        .then((result) => {\n          setOutput(result);\n          setName('');\n        })\n        .catch(console.error);\n      }}>Check</button>\n      {output ? <p>{output}</p> : null}\n    </div>\n  )\n}","import { ethers } from \"ethers\";\nconst types = require('./types')\nconst delegationUtils = require('eth-delegatable-utils');\nconst { recoverDelegationSigner } = delegationUtils;\nconst createTypedMessage = require('./createTypedMessage');\nconst sigUtil = require('@metamask/eth-sig-util');\nconst { chainId, address, name } = require('./config.json');\nconst { abi } = require('./artifacts');\nconst CONTRACT_NAME = name;\n\ntypes.domain.chainId = chainId;\ntypes.domain.verifyingContract = address;\n\n/*\ntype SignedDelegation = {\n  delegation: Delegation,\n  signature: string,\n}\n\ntype Delegation = {\n  delegate: string,\n  authority: string,\n  caveats: Caveat[],\n}\n\ntype Caveat = {\n  enforcer: string,\n  terms: string,\n}\n\ntype Invitation = {\n  signedDelegations: SignedDelegation[],\n  key: string,\n}\n*/\n\nexport async function validateInvitation (invitation, provider) {\n  console.log('invitation', invitation);\n\n  const { chainId } = await provider.getNetwork();\n  const { signedDelegations, key } = invitation;\n  const wallet = new ethers.Wallet(key, provider);\n  const registry = await attachRegistry(wallet);\n\n  for (let i = 0; i < signedDelegations.length; i++) {\n    console.log('delegation ' + i);\n    const signedDelegation = signedDelegations[i];\n    const signer = recoverDelegationSigner(signedDelegation, {\n      chainId,\n      verifyingContract: registry.address,\n      name: CONTRACT_NAME,\n    });\n    console.log('signed by ', signer);\n    console.log('delegating to ', signedDelegation.delegation.delegate);\n\n    const typedMessage = createTypedMessage(registry, signedDelegation.delegation, 'Delegation', CONTRACT_NAME, chainId);\n\n    if (i === 0) {\n      if (signer !== '0xDdb18b319BE3530560eECFF962032dFAD88212d4'.toLowerCase()) {\n        throw new Error('invalid signer' + signer + ' instead of '+ '0xDdb18b319BE3530560eECFF962032dFAD88212d4'.toLowerCase());\n      }\n    } else if (signer.toLowerCase() !== delegate) {\n      throw new Error('Invalid invitation chain');\n    }\n\n    const delegate = signedDelegations[signedDelegations.length - 1].delegation.delegate.toLowerCase();\n    if (wallet.address.toLowerCase() !== delegate.toLowerCase()) {\n      throw new Error ('Invalid invitation, delegate does not match provided key.');\n    }\n\n  }\n\n  return !!invitation;\n}\n\nasync function attachRegistry (signer) {\n  const Registry = new ethers.Contract(address, abi, signer);\n  const _registry = await Registry.attach(address);\n  console.log('Attaching to existing contract', _registry);\n  const deployed = await _registry.deployed();\n  return deployed;\n}\n","const { signDelegation } = require('eth-delegatable-utils');\nimport { ethers } from \"ethers\";\nconst { chainId, address, name } = require('./config.json');\nconst CONTRACT_NAME = name;\nconst sigUtil = require('eth-sig-util');\nconst { TypedDataUtils } = sigUtil;\nconst types = require('./types');\n\nexport default function createInvitation (invitation) {\n  const { signedDelegations, key } = invitation;\n  const signedDelegation = signedDelegations[signedDelegations.length - 1];\n\n  const delegate = ethers.Wallet.createRandom();\n  console.log('types', types);\n  const delegationHash = TypedDataUtils.hashStruct('SignedDelegation', signedDelegation, types.types, true);\n  const hexHash = '0x' + delegationHash.toString('hex');\n\n  const delegation = {\n    delegate: delegate.address,\n    authority: hexHash,\n\n    // Revokable by default:\n    caveats: [{\n      enforcer: address,\n      terms: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    }]\n  }\n\n  const newSignedDelegation = signDelegation(delegation, key, {\n    chainId,\n    verifyingContract: address,\n    name: CONTRACT_NAME,\n  });\n  const newInvite = {\n    signedDelegations: [...signedDelegations, newSignedDelegation],\n    key: delegate.privateKey,\n  }\n  console.log({ newInvite });\n  return newInvite;\n}\n","import React, { useEffect, useState } from 'react';\nimport Landing from \"./Landing\"\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Routes,\n  useHistory,\n  useLocation\n} from \"react-router-dom\";\n\nimport { ethers } from \"ethers\";\nconst types = require('./types')\nconst { generateUtil } = require('eth-delegatable-utils');\nconst { abi } = require('./artifacts');\nconst { chainId, address, name } = require('./config.json');\nimport createRegistry from './createRegistry';\nconst CONTRACT_NAME = name;\nconst util = generateUtil({\n  chainId,\n  verifyingContract: address,\n  name: CONTRACT_NAME,\n});\n\nimport PhishingReport from './PhishingReport';\nimport PhisherCheck from './PhisherCheck';\nimport { validateInvitation } from './delegator';\nimport createInvitation from './createInvitation';\n\nexport default function (props) {\n  const query = useQuery();\n  const { provider } = props;\n  const [ invitation, setInvitation ] = useState(null);\n  const [ errorMessage, setErrorMessage ] = useState(null);\n  const [ loading, setLoading ] = useState(false);\n  const [ registry, setRegistry ] = useState(null);\n  const [ invitations, setInvitations ] = useState([]);\n  const [ loaded, setLoaded ] = useState(false); // For loading invitations\n  const history = useHistory();\n\n  // Get registry\n  useEffect(() => {\n    if (registry) {\n      return;\n    }\n\n    createRegistry()\n    .then((_registry) => {\n      setRegistry(_registry);\n    }).catch(console.error);\n  });\n\n  useEffect(() => {\n    async function checkInvitations () {\n      const network = await provider.getNetwork();\n\n      if (!loading) {\n        setLoading(true);\n\n        if (!invitation) {\n          try {\n            let parsedInvitation;\n            let rawLoaded = document.cookie;\n            if (rawLoaded) {\n              parsedInvitation = JSON.parse(rawLoaded);\n            }\n            if (!parsedInvitation || parsedInvitation === 'null') {\n              parsedInvitation = JSON.parse(query.get(\"invitation\"));\n              await validateInvitation(parsedInvitation, provider);\n              document.cookie = query.get(\"invitation\");\n            }\n\n            history.push('/members');\n            setInvitation(parsedInvitation);\n            setLoading(false);\n          } catch (err) {\n            console.error(err);\n            setErrorMessage(err.message);\n          }\n        }\n      }\n    }\n\n    checkInvitations().catch(console.error);\n  });\n\n  useEffect(() => {\n    if (loaded) {\n      return;\n    }\n    try {\n      const rawStorage = localStorage.getItem('outstandingInvitations');\n      let loadedInvitations = JSON.parse(rawStorage) || [];\n      setInvitations(loadedInvitations);\n      setLoaded(true);\n    } catch (err) {\n      console.error(err);\n    }\n  });\n\n  if (!invitation) {\n    if (errorMessage) {\n      return (<div>\n        <h3>Invalid invitation.</h3>\n        <p>Sorry, we were unable to process your invitation.</p>\n        <p className='error'>{ errorMessage } </p>\n      </div>)   \n    } else {\n      return (<div>\n        <h3>Processing invitation...</h3> \n      </div>)\n    }\n  }\n\n  const inviteView = generateInviteView(invitation, (invitation) => {\n    if (invitation) {\n      console.log(`appending ${invitation.petName} to outstanding invites`);\n      const newInvites = [...invitations, invitation];\n      localStorage.setItem('outstandingInvitations', JSON.stringify(newInvites));\n      setInvitations(newInvites);\n    } \n  });\n\n  if (!registry) {\n    return <p>Loading. Or connect to the Goerli test network. This is a hackathon project, please forgive the rough edges.</p>\n  }\n\n  return (\n    <div>\n      <h1>\n        Member Portal \n      </h1>\n\n      <div className=\"controlBoard\">\n\n        <PhishingReport invitation={invitation} provider={provider}/>\n\n        <PhisherCheck checkPhisher={async (name) => {\n          console.log('checking if phisher', name);\n          try {\n            const result = await registry.isPhisher('TWT:' + name.toLowerCase());\n            console.log('result is ', result);\n            if (result) {\n              return `${name} is an accused phisher.`;\n            } else {\n              return `${name} is not a registered phisher.`;\n            }\n          } catch (err) {\n            console.error(err);\n          }\n        }}/>\n\n        { inviteView }\n\n        <div className='box'>\n          <h3>Outstanding Invitations</h3>\n          { invitations.map((_invitation, index) => {\n            return (\n              <div key={index}>\n                <span>{ _invitation.petName }</span>\n                <button onClick={async () => {\n                  const { signedDelegations } = _invitation.invitation;\n                  const signedDelegation = signedDelegations[signedDelegations.length - 1];\n\n                  const delegationHash = util.createSignedDelegationHash(signedDelegation);\n                  const intendedRevocation = {\n                    delegationHash,\n                  }\n                  const signedIntendedRevocation = util.signRevocation(intendedRevocation, invitation.key);\n\n                  const block = await registry.revokeDelegation(signedDelegation, signedIntendedRevocation);\n\n                  const newInvites = [...invitations];\n                  newInvites.splice(index, 1);\n                  localStorage.setItem('outstandingInvitations', JSON.stringify(newInvites));\n                  setInvitations(newInvites);\n                }}>Revoke</button>\n              </div>\n            )\n          })}\n        </div>\n\n        <div className='box'>\n          <h3>Endorse a benevolent entity (coming soon)</h3>\n        </div>\n\n        <div className='box'>\n          <h3>Review your invites and their reports. (Coming soon!)</h3>\n        </div>\n\n        <Landing />\n      </div>\n\n    </div>\n  )\n}\n\nfunction generateInviteView(invitation, addInvitation) {\n  const tier = invitation.signedDelegations.length;\n\n  if (tier < 4) {\n    return (\n      <div className='box'>\n        <p>You are a tier {invitation.signedDelegations.length} invitee. This means you can invite up to {4-tier} additional tiers of members.</p>\n        <button onClick={() => {\n          const petName = prompt('Who is this invitation for (for your personal use only, so you can view their reports and revoke the invitation)?');\n          const newInvitation = createInvitation(invitation);\n          const inviteLink = window.location.origin + '/members?invitation=' + encodeURIComponent(JSON.stringify(newInvitation));\n          navigator.clipboard.writeText(inviteLink).then(function() {\n            alert('Copied to clipboard!');\n            if (addInvitation) {\n              addInvitation({\n                petName,\n                invitation: newInvitation,\n              });\n            }\n          });\n        }}>Copy new invite link</button>\n      </div> \n    );\n  } else if (tier === 4) {\n    <div>\n      <p>You are a tier 4 member. That means you can't currently invite new members through this interface, but if this site becomes popular, we can add support for this later.</p>\n    </div> \n  }\n}\n\nfunction useQuery() {\n  const { search } = useLocation();\n\n  return React.useMemo(() => new URLSearchParams(search), [search]);\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch,\n  useLocation\n} from \"react-router-dom\";\nimport Initiation from './Initiation';\n\n// Routes\nimport Landing from './Landing';\n\nexport default function QueryParamsRouter(props) {\n  const { provider } = props;\n  let query = useQuery();\n\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Landing/>\n      </Route>\n      <Route path=\"/members/\">\n        <Initiation provider={provider} />\n      </Route>\n    </Switch>\n  );\n}\n\nfunction useQuery() {\n  const { search } = useLocation();\n\n  return React.useMemo(() => new URLSearchParams(search), [search]);\n}\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) =>\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\n\nexport default function Address(props) {\n  const address = props.value || props.address;\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const { currentTheme } = useThemeSwitcher();\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  let displayAddress = address.substr(0, 6);\n\n  const ensSplit = ens && ens.split(\".\");\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\n\n  if (validEnsCheck) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  let text;\n  if (props.onChange) {\n    text = (\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  } else {\n    text = (\n      <Text copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {text}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier || 1;\n\n  if (dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  matic: {\n    name: \"matic\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 25000000000,\n  },\n  testnetHarmony: {\n    name: \"Harmony Testnet\",\n    color: \"#00b0ef\",\n    chainId: 1666700000,\n    blockExplorer: \"https://explorer.pops.one/\",\n    rpcUrl: `https://api.s0.b.hmny.io`,\n    gasPrice: 1000000000,\n  },\n  mainnetHarmony: {\n    name: \"Harmony Mainnet\",\n    color: \"#00b0ef\",\n    chainId: 1666600000,\n    blockExplorer: \"https://explorer.harmony.one/\",\n    rpcUrl: `https://api.harmony.one`,\n    gasPrice: 1000000000,\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      var options = null;\n      var notify = null;\n        options = {\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n          system: \"ethereum\",\n          networkId: network.chainId,\n          // darkMode: Boolean, // (default: false)\n          transactionHandler: txInformation => {\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n            const possibleFunction = callbacks[txInformation.transaction.hash];\n            if (typeof possibleFunction === \"function\") {\n              possibleFunction(txInformation.transaction);\n            }\n          },\n        };\n\n        notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer || props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { Address } from \"..\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = thing => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return <Address address={thing} fontSize={22} />;\n  }\n  return JSON.stringify(thing);\n};\n\nexport default tryToDisplay;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  result = tryToDisplay(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\n// import { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider, onChange } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n        //console.log(_faucetAddress);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  // const ens = useLookupAddress(ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n        let newAddress = newValue;\n        // if (newAddress.indexOf(\".eth\") > 0 || newAddress.indexOf(\".xyz\") > 0) {\n        //   try {\n        //     const possibleAddress = await ensProvider.resolveName(newAddress);\n        //     if (possibleAddress) {\n        //       newAddress = possibleAddress;\n        //     }\n        //     // eslint-disable-next-line no-empty\n        //   } catch (e) { }\n        // }\n        setAddress(newAddress);\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        // value={ens || address}\n        onChange={e => {\n          // setAddress(e.target.value);\n          updateAddress(e.target.value);\n        }}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\r\n// @ts-ignore\r\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\r\n\r\nexport const loadAppContracts = async () => {\r\n  const config = {};\r\n  config.deployedContracts = (await contractListPromise).default ?? {};\r\n  config.externalContracts = (await externalContractsPromise).default ?? {};\r\n  return config;\r\n};\r\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\nimport {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  return undefined;\n  console.log(\"no call of that name!\");\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n\n  const [tokens, setTokens] = useState();\n\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenListResponse = await fetch(_tokenListUri);\n        const tokenListJson = await tokenListResponse.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { utils } from \"ethers\";\nimport { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { Address, AddressInput } from \"../components\";\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Button, Input, Table, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport GraphiQL from \"graphiql\";\nimport \"graphiql/graphiql.min.css\";\nimport fetch from \"isomorphic-fetch\";\nimport React, { useState } from \"react\";\nimport { Address } from \"../components\";\n\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\",\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\n\n  const purposeColumns = [\n    {\n      title: \"Purpose\",\n      dataIndex: \"purpose\",\n      key: \"purpose\",\n    },\n    {\n      title: \"Sender\",\n      key: \"id\",\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"createdAt\",\n      key: \"createdAt\",\n      dataIndex: \"createdAt\",\n      render: d => new Date(d * 1000).toISOString(),\n    },\n  ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  const deployWarning = (\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\n  );\n\n  return (\n    <>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        You will find that parsing/tracking events with the{\" \"}\n        <span className=\"highlight\" style={highlight}>\n          useEventListener\n        </span>{\" \"}\n        hook becomes a chore for every new project.\n      </div>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        Instead, you can use{\" \"}\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n          The Graph\n        </a>{\" \"}\n        with 🏗 scaffold-eth (\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\n          learn more\n        </a>\n        ):\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚮</span>\n        Clean up previous data:\n        <span className=\"highlight\" style={highlight}>\n          yarn clean-graph-node\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        Spin up a local graph node by running\n        <span className=\"highlight\" style={highlight}>\n          yarn run-graph-node\n        </span>\n        <span style={{ marginLeft: 4 }}>\n          {\" \"}\n          (requires{\" \"}\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\n            {\" \"}\n            Docker\n          </a>\n          ){\" \"}\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        Create your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-create-local\n        </span>\n        (only required once!)\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        Deploy your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-ship-local\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🖍️</span>\n        Edit your <b>local subgraph</b> in\n        <span className=\"highlight\" style={highlight}>\n          packages/subgraph/src\n        </span>\n        (learn more about subgraph definition{\" \"}\n        <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">\n          here\n        </a>\n        )\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤩</span>\n        Deploy your <b>contracts and your subgraph</b> in one go by running\n        <span className=\"highlight\" style={highlight}>\n          yarn deploy-and-graph\n        </span>\n      </div>\n\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\n        <div style={{ margin: 32, textAlign: \"right\" }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            onClick={() => {\n              console.log(\"newPurpose\", newPurpose);\n              /* look how you call setPurpose on your contract: */\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n            }}\n          >\n            Set Purpose\n          </Button>\n        </div>\n\n        {data ? (\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\n        ) : (\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\n        )}\n\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n\n      <div style={{ padding: 64 }}>...</div>\n    </>\n  );\n}\n\nexport default Subgraph;\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport logo from './logo.svg';\nimport QueryParamsRoute from './QueryParamsRoute';\n//import Torus from \"@toruslabs/torus-embed\"\nimport MetaMaskOnboarding from '@metamask/onboarding'\nimport { Alert, Button, Col, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nconst config = require('./config.json');\nimport { HashRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Account, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor } from \"./helpers\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\n// import Hints from \"./Hints\";\nimport { ExampleUI, Hints, Subgraph } from \"./views\";\n\n// contracts\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\nimport externalContracts from \"./contracts/external_contracts\";\n\nimport { useContractConfig } from \"./hooks\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst targetNetwork = NETWORKS.localhost; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\n\nfunction App(props) {\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [chainId, setChainId] = useState(null);\n  const [loadingChainId, setLoadingChainId] = useState(false);\n\n  if (!injectedProvider && MetaMaskOnboarding.isMetaMaskInstalled()) { \n    const ethersProvider = new ethers.providers.Web3Provider(window.ethereum);\n    setInjectedProvider(ethersProvider);\n  }\n\n  if (!MetaMaskOnboarding.isMetaMaskInstalled()) {\n    return <div>Please <button onClick={() => {\n      const onboarding = new MetaMaskOnboarding();\n      onboarding.startOnboarding();\n    }}>Install MetaMask</button> to continue.</div>;\n  }\n\n  if (chainId && chainId !== config.chainId) {\n    console.log('asking you to switch');\n    return <div>Please switch to the {config.chainName} chain.</div>;\n    /*\n  } else if (!chainId && !loadingChainId) {\n    console.log('initiating new chain fetch')\n    useEffect(() => {\n      setLoadingChainId(true);\n      injectedProvider.getNetwork().then((network) => {\n        console.log('got network', network);\n        setChainId(network.chainId);\n        setLoadingChainId(false);\n      })\n      .catch(console.error);\n\n      return function () {\n        setLoadingChainId(false);\n      }\n    }, [injectedProvider]);\n    */\n  }\n\n  return (\n    <div className=\"App\">\n      \n      <header className=\"App-header\">\n        <h1>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          MobyMask</h1>\n        <p>\n          An alliance of good-hearted phish, aiming to eliminate phishers. \n        </p>\n      </header>\n\n      <Router>\n        <QueryParamsRoute provider={injectedProvider}/>\n      </Router>\n\n      <div className='footer'>\n        <p>Reporters are added on an invite-only basis.</p>\n        <p>Learn more about how our invite system works at <a href=\"https://github.com/danfinlay/delegatable-eth\">delegatable-eth</a>.</p>\n      </div>\n\n    </div>\n  );\n\n\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider);\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // const contractConfig = useContractConfig();\n\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  ]);\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\n\n  // 📟 Listen for broadcast events\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n  ]);\n\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  let faucetHint = \"\";\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  const [faucetClicked, setFaucetClicked] = useState(false);\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header />\n      {networkDisplay}\n      <BrowserRouter>\n        <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\n          <Menu.Item key=\"/\">\n            <Link\n              onClick={() => {\n                setRoute(\"/\");\n              }}\n              to=\"/\"\n            >\n              YourContract\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/hints\">\n            <Link\n              onClick={() => {\n                setRoute(\"/hints\");\n              }}\n              to=\"/hints\"\n            >\n              Hints\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/exampleui\">\n            <Link\n              onClick={() => {\n                setRoute(\"/exampleui\");\n              }}\n              to=\"/exampleui\"\n            >\n              ExampleUI\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/mainnetdai\">\n            <Link\n              onClick={() => {\n                setRoute(\"/mainnetdai\");\n              }}\n              to=\"/mainnetdai\"\n            >\n              Mainnet DAI\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/subgraph\">\n            <Link\n              onClick={() => {\n                setRoute(\"/subgraph\");\n              }}\n              to=\"/subgraph\"\n            >\n              Subgraph\n            </Link>\n          </Menu.Item>\n        </Menu>\n\n        <Switch>\n          <Route exact path=\"/\">\n            {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n\n            <Contract\n              name=\"YourContract\"\n              signer={userSigner}\n              provider={localProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n              contractConfig={contractConfig}\n            />\n          </Route>\n          <Route path=\"/hints\">\n            <Hints\n              address={address}\n              yourLocalBalance={yourLocalBalance}\n              mainnetProvider={mainnetProvider}\n              price={price}\n            />\n          </Route>\n          <Route path=\"/exampleui\">\n            <ExampleUI\n              address={address}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              localProvider={localProvider}\n              yourLocalBalance={yourLocalBalance}\n              price={price}\n              tx={tx}\n              writeContracts={writeContracts}\n              readContracts={readContracts}\n              purpose={purpose}\n              setPurposeEvents={setPurposeEvents}\n            />\n          </Route>\n          <Route path=\"/mainnetdai\">\n            <Contract\n              name=\"DAI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n              contractConfig={contractConfig}\n              chainId={1}\n            />\n            {/*\n            <Contract\n              name=\"UNI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.UNI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n            />\n            */}\n          </Route>\n          <Route path=\"/subgraph\">\n            <Subgraph\n              subgraphUri={props.subgraphUri}\n              tx={tx}\n              writeContracts={writeContracts}\n              mainnetProvider={mainnetProvider}\n            />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n\n      <ThemeSwitch />\n\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n        <Account\n          address={address}\n          localProvider={localProvider}\n          userSigner={userSigner}\n          mainnetProvider={mainnetProvider}\n          price={price}\n          web3Modal={web3Modal}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n          blockExplorer={blockExplorer}\n        />\n        {faucetHint}\n      </div>\n\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={8}>\n            <Ramp price={price} address={address} networks={NETWORKS} />\n          </Col>\n\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\n            <GasGauge gasPrice={gasPrice} />\n          </Col>\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                💬\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row>\n\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n              /*  if the local provider has a signer, let's show the faucet:  */\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <App subgraphUri={subgraphUri} />\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","const typedMessage = {\n  primaryType: 'Delegation',\n  domain: {\n    name: 'MobyMask',\n    version: '1',\n  },\n\n  entries: {\n    delegate: \"address\",\n    caveat: \"Caveat\",\n    authority: \"SignedDelegation\",\n  },\n\n  types: {\n    EIP712Domain: [\n      { name: 'name', type: 'string' },\n      { name: 'version', type: 'string' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'verifyingContract', type: 'address' },\n    ],\n    Invocation: [\n      { name: 'transaction', type: 'Transaction' },\n      { name: 'authority', type: 'SignedDelegation[]' },\n    ],\n    Invocations: [\n      { name: 'batch', type: 'Invocation[]' },\n      { name: 'replayProtection', type: 'ReplayProtection' },\n    ],\n    SignedInvocation: [\n      { name: 'invocations', type: 'Invocations' },\n      { name: 'signature', type: 'bytes' },\n    ],\n    Transaction: [\n      { name: 'to', type: 'address' },\n      { name: 'gasLimit', type: 'uint256' },\n      { name: 'data', type: 'bytes' },\n    ],\n    ReplayProtection: [\n      { name: 'nonce', type: 'uint' },\n      { name: 'queue', type: 'uint' },\n    ],\n    Delegation: [\n      { name: 'delegate', type: 'address' },\n      { name: 'authority', type: 'bytes32' },\n      { name: 'caveats', type: 'Caveat[]' },\n    ],\n    Caveat: [\n      { name: 'enforcer', type: 'address' },\n      { name: 'terms', type: 'bytes' },\n    ],\n    SignedDelegation: [\n      { name: 'delegation', type: 'Delegation' },\n      { name: 'signature', type: 'bytes' },\n    ],\n  }\n};\n\nmodule.exports = typedMessage;\n","const types = require('./types')\nconst createTypedMessage = require('./createTypedMessage');\nconst sigUtil = require('@metamask/eth-sig-util');\nconst {\n  TypedDataUtils,\n} = sigUtil;\n\nconst { abi } = require('./artifacts');\nconst typedMessage = require('./types');\nconst CONTRACT_NAME = 'PhisherRegistry';\n\n// Util curries contract info into a reusable utility\nexports.generateUtil = function generateUtil (contractInfo) {\n  return {\n    recoverSigner: (signedDelegation) => exports.recoverSigner(signedDelegation, contractInfo),\n\n    signDelegation: (delegation, privateKey) => exports.signDelegation(delegation, privateKey, contractInfo),\n    recoverDelegationSigner: (signedDelegation) => exports.recoverDelegationSigner(signedDelegation, contractInfo),\n    createSignedDelegationHash: (signedDelegation) => exports.createSignedDelegationHash(signedDelegation, contractInfo),\n\n    signInvocation: (invocation, privateKey) => exports.signInvocation(invocation, privateKey, contractInfo),\n    recoverInvocationSigner: (signedInvocation) => exports.recoverInvocationSigner(signedInvocation, contractInfo),\n\n    signRevocation: (revocation, privateKey) => exports.signRevocation(revocation, privateKey, contractInfo),\n    recoverRevocationSignature: (signedRevocation) => exports.recoverRevocationSignature(signedRevocation, contractInfo),\n  }\n}\n\nexports.recoverSigner = exports.recoverDelegationSigner;\n\nexports.createSignedDelegationHash = function createDelegationHash (signedDelegation, contractInfo) {\n  const { verifyingContract, name, chainId } = contractInfo;\n  const hash = TypedDataUtils.hashStruct('SignedDelegation', signedDelegation, types.types, 'V4');\n  return hash;\n}\n\nexports.recoverDelegationSigner = function recoverDelegationSigner (signedDelegation, contractInfo) {\n  const { chainId, verifyingContract, name } = contractInfo;\n  types.domain.chainId = chainId;\n  types.domain.name = name;\n  types.domain.verifyingContract = verifyingContract;\n  const typedMessage = createTypedMessage(verifyingContract, signedDelegation.delegation, 'Delegation', name, chainId);\n\n  const signer = sigUtil.recoverTypedSignature({\n    data: typedMessage.data,\n    signature: signedDelegation.signature,\n    version: 'V4',\n  });\n  return signer;\n}\n\nexports.recoverInvocationSigner = function recoverInvocationSigner (signedInvocation, contractInfo) {\n  const { chainId, verifyingContract, name } = contractInfo;\n  types.domain.chainId = chainId;\n  types.domain.name = name;\n  types.domain.verifyingContract = verifyingContract;\n  const typedMessage = cdomainreateTypedMessage(verifyingContract, signedInvocation.invocations, 'Invocations', name, chainId);\n\n  const signer = sigUtil.recoverTypedSignature({\n    data: typedMessage.data,\n    signature: signedInvocation.signature,\n    version: 'V4',\n  });\n  return signer;\n}\n\nexports.signInvocation = function signInvocation(invocation, privateKey, contractInfo) {\n  const { chainId, verifyingContract, name } = contractInfo;\n  const typedMessage = createTypedMessage(verifyingContract, invocation, 'Invocations', name, chainId);\n\n  const signature = sigUtil.signTypedData({\n    privateKey: fromHexString(privateKey.indexOf('0x') === 0 ? privateKey.substring(2) : privateKey),\n    data: typedMessage.data,\n    version: 'V4',\n  });\n\n  const signedInvocation = {\n    signature,\n    invocations: invocation,\n  }\n\n  return signedInvocation;\n}\n\nexports.signDelegation = function signDelegation (delegation, privateKey, contractInfo) {\n  const { chainId, verifyingContract, name } = contractInfo;\n  const typedMessage = createTypedMessage(verifyingContract, delegation, 'Delegation', name, chainId);\n\n  const signature = sigUtil.signTypedData({\n    privateKey: fromHexString(privateKey.indexOf('0x') === 0 ? privateKey.substring(2) : privateKey),\n    data: typedMessage.data,\n    version: 'V4',\n  });\n\n  const signedDelegation = {\n    signature,\n    delegation,\n  }\n\n  return signedDelegation;\n}\n\nexports.signRevocation = function signRevocation (revocation, privateKey, contractInfo) {\n  const { chainId, verifyingContract, name } = contractInfo;\n  const typedMessage = createTypedMessage(verifyingContract, revocation, 'IntentionToRevoke', name, chainId);\n\n  const signature = sigUtil.signTypedData({\n    privateKey: fromHexString(privateKey.indexOf('0x') === 0 ? privateKey.substring(2) : privateKey),\n    data: typedMessage.data,\n    version: 'V4',\n  });\n\n  const signedRevocation = {\n    signature,\n    intentionToRevoke: revocation,\n  }\n\n  return signedRevocation;\n}\n\nexports.recoverRevocationSignature = function recoverRevocationSignature (signedRevocation, contractInfo) {\n  const { chainId, verifyingContract, name } = contractInfo;\n  types.domain.chainId = chainId;\n  types.domain.name = name;\n  types.domain.verifyingContract = verifyingContract;\n  const typedMessage = createTypedMessage(verifyingContract, signedRevocation.revocation, 'IntentionToRevoke', name, chainId);\n\n  const signer = sigUtil.recoverTypedSignature({\n    data: typedMessage.data,\n    signature: signedRevocation.signature,\n    version: 'V4',\n  });\n  return signer;\n}\n\nfunction fromHexString (hexString) {\n  if (!hexString || typeof hexString !== 'string') {\n    throw new Error('Expected a hex string.');\n  }\n  const matched = hexString.match(/.{1,2}/g)\n  if (!matched) {\n    throw new Error('Expected a hex string.');\n  }\n  const mapped = matched.map(byte => parseInt(byte, 16));\n  if (!mapped || mapped.length !== 32) {\n    throw new Error('Expected a hex string.');\n  }\n  return new Uint8Array(mapped);\n}\n","const typedMessage = {\n  primaryType: 'Delegation',\n  domain: {\n    name: 'PhisherRegistery',\n    version: '1',\n  },\n\n  entries: {\n    delegate: \"address\",\n    caveat: \"Caveat\",\n    authority: \"SignedDelegation\",\n  },\n\n  types: {\n    EIP712Domain: [\n      { name: 'name', type: 'string' },\n      { name: 'version', type: 'string' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'verifyingContract', type: 'address' },\n    ],\n    Invocation: [\n      { name: 'transaction', type: 'Transaction' },\n      { name: 'authority', type: 'SignedDelegation[]' },\n    ],\n    Invocations: [\n      { name: 'batch', type: 'Invocation[]' },\n      { name: 'replayProtection', type: 'ReplayProtection' },\n    ],\n    SignedInvocation: [\n      { name: 'invocations', type: 'Invocations' },\n      { name: 'signature', type: 'bytes' },\n    ],\n    Transaction: [\n      { name: 'to', type: 'address' },\n      { name: 'gasLimit', type: 'uint256' },\n      { name: 'data', type: 'bytes' },\n    ],\n    ReplayProtection: [\n      { name: 'nonce', type: 'uint' },\n      { name: 'queue', type: 'uint' },\n    ],\n    Delegation: [\n      { name: 'delegate', type: 'address' },\n      { name: 'authority', type: 'bytes32' },\n      { name: 'caveats', type: 'Caveat[]' },\n    ],\n    Caveat: [\n      { name: 'enforcer', type: 'address' },\n      { name: 'terms', type: 'bytes' },\n    ],\n    SignedDelegation: [\n      { name: 'delegation', type: 'Delegation' },\n      { name: 'signature', type: 'bytes' },\n    ],\n    IntentionToRevoke: [\n      { name: 'delegationHash', type: 'bytes32' },\n    ],\n    SignedIntentionToRevoke: [\n      { name: 'signature', type: 'bytes' },\n      { name: 'intentionToRevoke', type: 'IntentionToRevoke' },\n    ]\n  }\n};\n\nmodule.exports = typedMessage;\n\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n};\n","const { types } = require('./types');\n\nmodule.exports = function createTypedMessage (verifyingContract, message, primaryType, contractName, chainId) {\n  return { data: {\n    types,\n    primaryType,\n    domain: {\n      name: contractName,\n      version: '1',\n      chainId,\n      verifyingContract,\n    },\n    message,\n  }};\n}\n\n","const { types } = require('./types');\n\nmodule.exports = function createTypedMessage (yourContract, message, primaryType, CONTRACT_NAME, _chainId) {\n  const chainId = yourContract?.deployTransaction?.chainId || _chainId;\n  console.log('creating message for contract', yourContract);\n  return { data: {\n    types,\n    primaryType,\n    domain: {\n      name: CONTRACT_NAME,\n      version: '1',\n      chainId,\n      verifyingContract: yourContract.address,\n    },\n    message,\n  }};\n}\n"],"sourceRoot":""}